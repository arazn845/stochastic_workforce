using JuMP, CPLEX
using DataFrames

H = 4
J = 3
T = 2
s = [
    1 0 0;
    1 0 0; 
    0 1 0;
    0 0 1
]

d = [
    0.3  1.2   
    0.2  0.2
    1.0  0.0
]

zᵖ = [7;
      7;
      9;
      11
] * 1000

zᵐ = [
    0 3 5;
    0 3 5;
    1 0 3;
    2 4 0
];



m = Model(CPLEX.Optimizer) 
@variable(m, ψ[1:H , 1:J], Bin)
@variable(m, α[h in 1:H , j in 1:J , t in 1:T], Bin)


@objective(m, Min, sum(ψ[h,j] * zᵖ[h] * T for h in 1:H for j in 1:J ) )

@constraint(m, c1[h in 1:H , j in 1:J], ψ[h,j] ≤ s[h,j])

@constraint(m, c2[j in 1:J , t in 1:T], sum( α[h,j,t] for h in 1:H ) ≥ d[j,t] )
@constraint(m, c3[h in 1:H , j in 1:J , t in 1:T], α[h,j,t] ≤ ψ[h,j])
@constraint(m, c4[h in 1:H  , t in 1:T], sum( α[h,j,t] for j in 1:J) ≤ 1 )

optimize!(m)

@show objective_value(m)


df_ψ = DataFrame(value.(ψ), :auto)
rename!(df_ψ,[:j1,:j2, :j3])

df_α1 = DataFrame( value.(α[: , : , 1]), :auto)
rename!(df_α1, [:j1,:j2, :j3])

df_α2 = DataFrame(value.(α[: , : , 2]), :auto)
rename!(df_α2, [:j1,:j2, :j3])

@show df_ψ
@show df_α1
@show df_α2
